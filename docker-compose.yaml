---
version: "3"

services:
  apigw:
    container_name: "vc_dev_apigw"
    image: docker.sunet.se/dc4eu/apigw:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
      - /var/log/sunet:/var/log/sunet
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.2
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  ui:
    container_name: "vc_dev_ui"
    image: docker.sunet.se/dc4eu/ui:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
#      apigw:
#        condition: service_started
#      mockas:
#        condition: service_started
#      kafka0:
#        condition: service_healthy
      - apigw
      - mockas
      - kafka0
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.50
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  kafka0:
    container_name: "vc_dev_kafka0"
    image: bitnami/kafka:latest
    restart: always
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka0:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka0:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - ./kraft0-data:/bitnami/kafka
    #user: "${UID}:${GID}"  # TODO: Använd variabler för att få rätt UID och GID från värdmaskinen
    user: "0:0" # TODO: ATTENTION: using root user just to get it to work during initiall dev, needs to be changed before pull request
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.60
#    healthcheck:
#      test: [ "CMD-SHELL", "nc -z localhost 9092 || exit 1" ]
#      interval: 10s
#      timeout: 5s
#      retries: 20

  kafka-ui:
    container_name: "vc_dev_kafka_ui"
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka0:9092
    depends_on:
      - kafka0
#      kafka0:
#        condition: service_healthy
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.61

  issuer:
    container_name: "vc_dev_issuer"
    image: docker.sunet.se/dc4eu/issuer:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
      - /var/log/sunet:/var/log/sunet
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.4
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  verifier:
    container_name: "vc_dev_verifier"
    image: docker.sunet.se/dc4eu/verifier:latest
    restart: always
    volumes:
      - ./cert:/cert:ro
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.6
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  registry:
    container_name: "vc_dev_registry"
    image: docker.sunet.se/dc4eu/registry:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.8
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  persistent:
    container_name: "vc_dev_persistent"
    image: docker.sunet.se/dc4eu/persistent:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    depends_on:
      - redis
      - mongo
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.12
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  mockas:
    container_name: "vc_dev_mockas"
    image: docker.sunet.se/dc4eu/mockas:latest
    restart: always
    volumes:
      - ./dev_config_docker.yaml:/config.yaml:ro
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.13
    environment:
      - "VC_CONFIG_YAML=config.yaml"

  redis:
    image: redis:alpine
    container_name: "vc_dev_redis"
    restart: always
    expose:
      - 6373
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.18

  mongo:
    image: mongo:4.0.10
    container_name: "vc_dev_mongo"
    restart: always
    expose:
      - 27017
    volumes:
      - mongo_data:/data
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.20

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: vc_dev_jaeger
    restart: always
    expose:
      - 16686
      - 4317
      - 4318
    networks:
      vc-dev-net:
        ipv4_address: 172.16.50.22
    environment:
      - "COLLECTOR_OTLP_ENABLED=true"

networks:
  vc-dev-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-vc-dev
    ipam:
      driver: default
      config:
        - subnet: 172.16.50.0/24
volumes:
  redis_data:
  mongo_data:
  kraft0-data:
    driver: local
